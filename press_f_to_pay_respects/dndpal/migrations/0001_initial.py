# Generated by Django 2.0.2 on 2018-04-01 18:38

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Armor',
            fields=[
                ('name', models.CharField(default='', help_text='Enter the name of the armor', max_length=100, primary_key=True, serialize=False)),
                ('armor_bonus', models.SmallIntegerField(default=0, help_text='Enter the armor bonus for this item in pounds.')),
                ('max_dexterity', models.SmallIntegerField(default=0, help_text='Enter the weight for this item in pounds.')),
                ('is_stealth', models.BooleanField(default=False, help_text='Alan put something here :^)')),
                ('weight', models.SmallIntegerField(default=0, help_text='Enter the weight for this item in pounds.')),
                ('gold', models.IntegerField(default=0, help_text='Enter the gold-price component for this armor')),
                ('silver', models.IntegerField(default=0, help_text='Enter the silver-price component for this armor')),
                ('copper', models.IntegerField(default=0, help_text='Enter the copper-price component for this armor')),
                ('required_strength', models.SmallIntegerField(default=0, help_text='Enter the required strength to use this armor.')),
                ('required_materials', models.CharField(default='', help_text='Enter the required materials to cast this spell in JSON format.', max_length=10000)),
            ],
        ),
        migrations.CreateModel(
            name='Character',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', help_text='Enter a name for your character', max_length=30)),
                ('level', models.PositiveSmallIntegerField(default=1, help_text='Enter the level your character')),
                ('armor_class', models.PositiveSmallIntegerField(default=1, help_text='Enter the armor class for your character')),
                ('initiative', models.PositiveSmallIntegerField(default=1, help_text='Enter the armor class for your character')),
                ('speed', models.PositiveSmallIntegerField(default=1, help_text='Enter the speed for your character')),
                ('max_hit', models.PositiveSmallIntegerField(default=1, help_text='Enter the max hitpoints for your character')),
                ('temp_hit', models.PositiveSmallIntegerField(default=1, help_text='Enter the temporary hitpoints for your character')),
                ('profeciencies', models.CharField(default='', help_text='Enter the list of proficiencies for this character in JSON format.', max_length=30)),
                ('strength', models.SmallIntegerField(default=0, help_text='Enter the strength state for your character.')),
                ('dexterity', models.SmallIntegerField(default=0, help_text='Enter the dexterity state for your character.')),
                ('constitution', models.SmallIntegerField(default=0, help_text='Enter the constitution state for your character.')),
                ('intelligence', models.SmallIntegerField(default=0, help_text='Enter the intelligence state for your character.')),
                ('wisdowm', models.SmallIntegerField(default=0, help_text='Enter the wisdowm state for your character.')),
                ('charisma', models.SmallIntegerField(default=0, help_text='Enter the charisma state for your character.')),
                ('gold', models.IntegerField(default=0, help_text='Enter the gold of the character')),
                ('silver', models.IntegerField(default=0, help_text='Enter the gold of the character')),
                ('copper', models.IntegerField(default=0, help_text='Enter the gold of the character')),
                ('alignment', models.CharField(choices=[('LG', 'Lawful Good'), ('NG', 'Neutral Good'), ('CG', 'Chaotic Good'), ('LN', 'Lawful Neutral'), ('NN', 'True Neutral'), ('CN', 'Chaotic Neutral'), ('LE', 'Lawful Evil'), ('NE', 'True Neutral'), ('CE', 'Chaotic Evil')], default='NN', max_length=2)),
            ],
        ),
        migrations.CreateModel(
            name='CharacterClass',
            fields=[
                ('name', models.CharField(default='', help_text='Enter the name of this class', max_length=100, primary_key=True, serialize=False)),
                ('descrtiption', models.CharField(default='', help_text='Enter a description of this class', max_length=1000)),
                ('hitpoints', models.PositiveIntegerField(default=10, help_text='Enter the hit points for this character')),
                ('skill_proficiency_limit', models.PositiveSmallIntegerField(default=5, help_text='Enter the max amount of skills this class can be proficient in')),
            ],
        ),
        migrations.CreateModel(
            name='CharacterClassFeatures',
            fields=[
                ('name', models.CharField(default='', help_text='Enter the name of this class feature', max_length=100, primary_key=True, serialize=False)),
                ('description', models.CharField(default='', help_text='Enter a description of this feature; i.e. what this feature does', max_length=5000)),
                ('required_level', models.SmallIntegerField(default=0, help_text='Enter the required level for this feature', null=True)),
                ('character_class', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='dndpal.CharacterClass')),
            ],
        ),
        migrations.CreateModel(
            name='CharacterClassSpellList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('required_level', models.SmallIntegerField(default=0, help_text='Enter the required level for this spell', null=True)),
                ('ranking', models.SmallIntegerField(default=0, help_text='Enter the ranking of this spell relative to the other spells available for this class.', null=True)),
                ('character_class', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='dndpal.CharacterClass')),
            ],
        ),
        migrations.CreateModel(
            name='CharacterClassStartingEquipment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.SmallIntegerField(default=2, help_text='Enter the number of starting items this class starts with', null=True)),
                ('items', models.CharField(default='', help_text='Enter a list of the items in JSON format. Ex: {"item_1": "Spatula", "item_2": "Dishsoap"}', max_length=1000)),
                ('character_class', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='dndpal.CharacterClass')),
            ],
        ),
        migrations.CreateModel(
            name='CharacterSubclass',
            fields=[
                ('name', models.CharField(default='', help_text='Enter the name of this Subclass', max_length=100, primary_key=True, serialize=False)),
                ('descrtiption', models.CharField(default='', help_text='Enter a description of this Subclass', max_length=1000)),
                ('required_level', models.SmallIntegerField(default=0, help_text='Enter the required level for this Subclass', null=True)),
                ('ranking', models.SmallIntegerField(default=0, help_text='Enter the ranking of this subclass relative to the other subclasses available for this class.', null=True)),
                ('parent_class', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='dndpal.CharacterClass')),
            ],
        ),
        migrations.CreateModel(
            name='CharacterSubclassSpellList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('required_level', models.SmallIntegerField(default=0, help_text='Enter the required level for this spell', null=True)),
                ('ranking', models.SmallIntegerField(default=0, help_text='Enter the ranking of this spell relative to the other spells available for this class.', null=True)),
                ('subclass', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='dndpal.CharacterSubclass')),
            ],
        ),
        migrations.CreateModel(
            name='Equipment',
            fields=[
                ('name', models.CharField(default='', help_text='Enter the name of the equipment', max_length=100, primary_key=True, serialize=False)),
                ('gold', models.IntegerField(default=0, help_text='Enter the gold-price component for this equipment')),
                ('silver', models.IntegerField(default=0, help_text='Enter the silver-price component for this equipment')),
                ('copper', models.IntegerField(default=0, help_text='Enter the copper-price component for this equipment')),
                ('weight', models.SmallIntegerField(default=0, help_text='Enter the weight for this item in pounds.')),
                ('descrtiption', models.CharField(default='', help_text='Enter a description of this item.', max_length=1000)),
                ('capacity', models.SmallIntegerField(default=0, help_text='Enter the amount of this item you have before any uses.')),
            ],
        ),
        migrations.CreateModel(
            name='Feat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('descrtiption', models.CharField(default='', help_text='Enter a description of this feat.', max_length=1000)),
                ('strength', models.SmallIntegerField(default=0, help_text='Enter the modification to the strength stat.')),
                ('dexterity', models.SmallIntegerField(default=0, help_text='Enter the modification to the dexterity stat.')),
                ('constitution', models.SmallIntegerField(default=0, help_text='Enter the modification to the constitution stat.')),
                ('intelligence', models.SmallIntegerField(default=0, help_text='Enter the modification to the intelligence stat.')),
                ('wisdowm', models.SmallIntegerField(default=0, help_text='Enter the modification to the wisdom stat.')),
                ('charisma', models.SmallIntegerField(default=0, help_text='Enter the modification to the charisma stat.')),
            ],
        ),
        migrations.CreateModel(
            name='FeatRanking',
            fields=[
                ('name', models.CharField(default='', help_text='Enter the name of the feat ranking', max_length=100, primary_key=True, serialize=False)),
                ('required_level', models.SmallIntegerField(default=0, help_text='Enter the required level for this spell', null=True)),
                ('ranking', models.SmallIntegerField(default=0, help_text='Enter the ranking of this feature relative to the other features available for this class.')),
            ],
        ),
        migrations.CreateModel(
            name='Properties',
            fields=[
                ('name', models.CharField(default='', help_text='Enter the name of this property.', max_length=100, primary_key=True, serialize=False)),
                ('description', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='dndpal.CharacterSubclass')),
            ],
        ),
        migrations.CreateModel(
            name='Race',
            fields=[
                ('name', models.CharField(default='', help_text='Enter the name of this race', max_length=100, primary_key=True, serialize=False)),
                ('description', models.CharField(default='', help_text='Enter a description of this race (backstory, beliefs, etc.)', max_length=5000)),
                ('speed', models.SmallIntegerField(default=0, help_text='Enter the speed for this race')),
                ('modifiers', models.CharField(default='', help_text='Enter the stats modifiers in JSON format. Ex: {"str": 2, "dex": 8}', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='RaceFeatures',
            fields=[
                ('name', models.CharField(default='', help_text='Enter the name of this race feature', max_length=100, primary_key=True, serialize=False)),
                ('description', models.CharField(default='', help_text='Enter a description of this feature; i.e. what this feature does', max_length=5000)),
                ('required_level', models.SmallIntegerField(default=0, help_text='Enter the required level for this feature', null=True)),
                ('race', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='dndpal.Race')),
            ],
        ),
        migrations.CreateModel(
            name='Spells',
            fields=[
                ('name', models.CharField(default='', help_text='Enter the name of the spell', max_length=100, primary_key=True, serialize=False)),
                ('cast_time', models.PositiveIntegerField(default=6, help_text='Enter the amount of seconds it takes the spell to cast. If a spell takes 1 turn, enter in the value: TBD.')),
                ('damage', models.PositiveIntegerField(default=1, help_text='The base hit point damage of the spell. If this is a healing spell, enter in the amount of hit points it heals for')),
                ('range', models.PositiveIntegerField(default=10, help_text='Enter the range of the spell in feet. If the range is infinite, enter the value: TBD')),
                ('area_effected', models.PositiveIntegerField(default=1, help_text='Enter the area affected by the spell after it connects (in feet).')),
                ('required_materials', models.CharField(default='', help_text='Enter the required materials to cast this spell in JSON format.', max_length=10000)),
                ('component_1', models.CharField(default='', help_text='Enter the first component to cast this spell in JSON format.', max_length=10000)),
                ('component_2', models.CharField(default='', help_text='Enter the second component to cast this spell in JSON format.', max_length=10000)),
                ('school', models.CharField(choices=[('ab', 'Abjuration'), ('co', 'Conjuration'), ('di', 'Divination'), ('en', 'Enchantment'), ('ev', 'Evocation'), ('il', 'Illusion'), ('ne', 'Necromancy'), ('tr', 'Transmutation'), ('un', 'Universal')], default='ab', max_length=2)),
            ],
        ),
        migrations.CreateModel(
            name='Subrace',
            fields=[
                ('name', models.CharField(default='', help_text='Enter the name of the subrace', max_length=100, primary_key=True, serialize=False)),
                ('description', models.CharField(default='', help_text='Enter a description of this sub-race (backstory, beliefs, etc.)', max_length=5000)),
                ('parent_race', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='dndpal.Race')),
            ],
        ),
        migrations.CreateModel(
            name='SubraceFeatures',
            fields=[
                ('required_level', models.SmallIntegerField(default=0, help_text='Enter the required level for this feature', null=True)),
                ('name', models.CharField(default='', help_text='Enter the name of this feature', max_length=100, primary_key=True, serialize=False)),
                ('description', models.CharField(default='', help_text='Enter a description for these features', max_length=5000)),
                ('subrace', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='dndpal.Subrace')),
            ],
        ),
        migrations.CreateModel(
            name='Weapon',
            fields=[
                ('name', models.CharField(default='', help_text='Enter the name of this weapon', max_length=100, primary_key=True, serialize=False)),
                ('gold', models.IntegerField(default=0, help_text='Enter the gold-price component for this weapon')),
                ('silver', models.IntegerField(default=0, help_text='Enter the silver-price component for this weapon')),
                ('copper', models.IntegerField(default=0, help_text='Enter the copper-price component for this weapon')),
                ('damage', models.PositiveIntegerField(default=1, help_text='The base hit point damage of this weapon.')),
                ('damage_type', models.CharField(choices=[('ac', 'Acid'), ('bl', 'Bludgeoning'), ('co', 'Cold'), ('fi', 'Fire'), ('fo', 'Force'), ('li', 'Lightning'), ('ne', 'Necrotic'), ('pi', 'Piercing'), ('po', 'Poisoning'), ('ps', 'Psychic'), ('ra', 'Radiant'), ('sl', 'Slashing'), ('th', 'Thunder')], default='ab', max_length=2)),
                ('range', models.PositiveIntegerField(default=10, help_text='Enter the range of the weapon in feet.')),
                ('weight', models.SmallIntegerField(default=0, help_text='Enter the weight for this item in pounds.')),
            ],
        ),
        migrations.AddField(
            model_name='properties',
            name='weapon',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='dndpal.Weapon'),
        ),
        migrations.AddField(
            model_name='character',
            name='character_class',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='dndpal.CharacterClass'),
        ),
        migrations.AddField(
            model_name='character',
            name='race',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='dndpal.Race'),
        ),
        migrations.AddField(
            model_name='character',
            name='subrace',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='dndpal.Subrace'),
        ),
        migrations.AddField(
            model_name='character',
            name='weapon',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='dndpal.Weapon'),
        ),
    ]
